#!/usr/bin/env bash

clear

Red='\e[1;31m'         # Red
Green='\e[1;32m'       # Green
Yellow='\e[1;33m'      # Yellow
Blue='\e[1;34m'        # Blue
Purple='\e[1;35m'      # Purple
Cyan='\e[1;36m'        # Cyan
White='\e[1;37m'       # White
echo
echo -e "
  ${Red}░▐█▀▄─▒█▒█▐██▒██░░░░▐█▀█▄░░▄█▀▄─▒▐█▀█▒▐█▒▐▀
  ${Red}░▐█▀▀▄▒█▒█░█▌▒██░░░░▐█▌▐█░▐█▄▄▐█▒▐█▄█▒▐██▌░
  ${Red}░▐█▄▄▀▒▀▄▀▐██▒██▄▄█░▐█▄█▀░▐█─░▐█▒▐█░░▒▐█▒▐▄"

echo -e "${Blue}         =======${Cyan} Aplications Web ${Blue}======"
echo
echo -n -e "${Red} Input name Apk: ${White}"
read name
echo -n -e "${Red} Input url web for Apk: ${White}"
read urls
CUR_PATH=`pwd`
OUTPUT_NAME=$name
ROOT_PATH=${CUR_PATH}
mkdir ${CUR_PATH}/$name
cp -rf ${CUR_PATH}/module/* ${CUR_PATH}/$name
xml=${CUR_PATH}/$name/AndroidManifest.xml
cat > $xml <<- EOM
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.$name.android">

    <uses-permission android:name="android.permission.INTERNET" />

    <uses-sdk
        android:minSdkVersion="12"
        android:targetSdkVersion="27" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
EOM

str=${CUR_PATH}/$name/res/values/strings.xml
cat > $str <<- EOM
<resources>
    <string name="app_name">$name</string>
</resources>
EOM

mkdir ${CUR_PATH}/$name/src/com/$name && mkdir ${CUR_PATH}/$name/src/com/$name/android

jav=${CUR_PATH}/$name/src/com/$name/android/MainActivity.java
cat > $jav <<- EOM
package com.$name.android;

import android.annotation.TargetApi;
import android.app.Activity;
import android.os.Build;
import android.os.Bundle;
import android.view.KeyEvent;
import android.webkit.WebResourceRequest;
import android.webkit.WebView;
import android.webkit.WebViewClient;

public class MainActivity extends Activity {

    private WebView webView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);



        webView = (WebView)findViewById(R.id.web);


        webView.setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                return false;
            }

            @TargetApi(Build.VERSION_CODES.N)
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                return false;
            }
        });

        webView.loadUrl("$urls");
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (event.getAction() == KeyEvent.ACTION_DOWN) {
            switch (keyCode) {
                case KeyEvent.KEYCODE_BACK:
                    if (webView.canGoBack()) {
                        webView.goBack();
                    } else {
                        finish();
                    }
                    return true;
            }

        }
        return super.onKeyDown(keyCode, event);
    }
}
EOM
cd ${CUR_PATH}/$name
echo
echo -e "${Yellow} search res dirrectories..."
sleep 2
if [ ! -d "res" ];then
    echo -e "${Red}Cannot find 'res' directory."
    exit
fi

echo -e "${Yellow} search src dirrectories..."
sleep 2
if [ ! -d "src" ];then
    echo -e "${Red}Cannot find 'src' directory."
    exit
fi

echo -e "${Red}  Generate R.java..${White}"
if [ ! -d "gen" ];then
    mkdir gen
fi
${ROOT_PATH}/bin/aapt package -m \
    -J gen \
    -M AndroidManifest.xml \
    -S res \
    -I ${ROOT_PATH}/bin/android.jar

export ANDROID_DATA=${ROOT_PATH}/val/android
mkdir -p ${ANDROID_DATA}/dalvik-cache

echo -e "${Red} Compile java code...${White}"
dalvikvm -Djava.io.tmpdir=${ROOT_PATH}/tmp  -Xmx256m \
    -cp ${ROOT_PATH}/bin/ecj.jar \
    org.eclipse.jdt.internal.compiler.batch.Main \
    -proc:none \
    -7 \
    -cp ${ROOT_PATH}/bin/android.classes.jar \
    -cp gen \
    -d bin/classes \
    -sourcepath src $(find src -type f -name "*.java")

echo -e "${Red} Convert classes to dex...${White}"
dalvikvm  -Xmx256m \
    -cp ${ROOT_PATH}/bin/dx.dex \
    dx.dx.command.Main --dex --output=./bin/classes.dex ./bin/classes

echo -e "${Red} Package resources...${White}"
RET=`${ROOT_PATH}/bin/aapt 2>&1 |grep no-version-vectors`
if [[ $RET = *"--no-version-vectors"* ]]
then
  if [ -d "$name/" ]
  then
    ${ROOT_PATH}/bin/aapt package -f \
      -I ${ROOT_PATH}/bin/android.jar \
      -S res \
      -M AndroidManifest.xml \
      -A $name \
      -F bin/${OUTPUT_NAME}.apk \
      --no-version-vectors
  else
    ${ROOT_PATH}/bin/aapt package -f \
      -I ${ROOT_PATH}/bin/android.jar \
      -S res \
      -M AndroidManifest.xml \
      -F bin/${OUTPUT_NAME}.apk \
      --no-version-vectors
  fi
else
  if [ -d "$name/" ]
  then
  ${ROOT_PATH}/bin/aapt package -f \
    -I ${ROOT_PATH}/bin/android.jar \
    -S res \
    -M AndroidManifest.xml \
    -A $name \
    -F bin/${OUTPUT_NAME}.apk
  else
  ${ROOT_PATH}/bin/aapt package -f \
    -I ${ROOT_PATH}/bin/android.jar \
    -S res \
    -M AndroidManifest.xml \
    -F bin/${OUTPUT_NAME}.apk
  fi
fi

cd bin
${ROOT_PATH}/bin/aapt add -f ${OUTPUT_NAME}.apk classes.dex

echo -e "${Red} Sign the APK...${White}"

dalvikvm -cp ${ROOT_PATH}/bin/apksigner.dex net.fornwall.apksigner.Main -p android ${ROOT_PATH}/bin/test.jks ${OUTPUT_NAME}.apk ${OUTPUT_NAME}.signed.apk

cp -rf ${CUR_PATH}/$name/bin/${OUTPUT_NAME}.signed.apk /sdcard/${OUTPUT_NAME}.apk
echo
echo -e "${Blue}APK Saved to sdcard "
echo -e "${Red} Done..."
rm -rf ${CUR_PATH}/$name

